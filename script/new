#!/bin/bash

set -e

# Parse arguments to detect --edit and --series flags
EDIT_FLAG=false
SERIES_VALUE=""
ARGS=()

for arg in "$@"; do
    if [ "$arg" = "--edit" ]; then
        EDIT_FLAG=true
    elif [ "$arg" = "--series" ]; then
        # Next argument will be the series value
        EXPECT_SERIES_VALUE=true
    elif [[ "$arg" == --series=* ]]; then
        # Handle --series=value format
        SERIES_VALUE="${arg#--series=}"
    elif [ "${EXPECT_SERIES_VALUE:-false}" = true ]; then
        # This is the series value following --series
        SERIES_VALUE="$arg"
        EXPECT_SERIES_VALUE=false
    else
        ARGS+=("$arg")
    fi
done

# Get arguments (after filtering out --edit and --series flags)
CONTENT_TYPE=${ARGS[0]}
SLUG_OR_CONTENT=${ARGS[1]}

# Get valid content types from archetypes directory
get_valid_types() {
    ls archetypes/ | sed 's/\.md$//' | grep -v -E '^(archive|series)$' || true
}

# Validate content type
validate_type() {
    local type=$1
    local valid_types
    valid_types=$(get_valid_types)
    
    if ! echo "$valid_types" | grep -q "^${type}$"; then
        echo "Invalid content type: $type" >&2
        echo "Valid types: $(echo "$valid_types" | tr '\n' ' ')" >&2
        exit 1
    fi
}

# Get valid series from content/series directory
get_valid_series() {
    ls content/series/ 2>/dev/null | grep -v '^\.$' | grep -v '^\.\.$' || true
}

# Validate series
validate_series() {
    local series=$1
    local valid_series
    valid_series=$(get_valid_series)

    if ! echo "$valid_series" | grep -q "^${series}$"; then
        echo "Invalid series: $series" >&2
        echo "Valid series: $(echo "$valid_series" | tr '\n' ' ')" >&2
        exit 1
    fi
}

# Get content type
if [ -z "$CONTENT_TYPE" ]; then
    valid_types=$(get_valid_types)
    CONTENT_TYPE=$(echo "$valid_types" | gum choose --header="Select content type:")
else
    validate_type "$CONTENT_TYPE"
fi

# Validate series if provided
if [ -n "$SERIES_VALUE" ]; then
    validate_series "$SERIES_VALUE"
fi

# Generate timestamps
current_date=$(date +%Y-%m-%d)
current_datetime=$(date +%Y-%m-%dT%H%M%S)

# Handle different content types
case "$CONTENT_TYPE" in
    scrap)
        # For scrap, use datetime format and handle content differently
        filename="content/scrap/${current_datetime}.md"
        
        if [ -z "$SLUG_OR_CONTENT" ]; then
            content=$(gum input --header="Enter content for scrap:")
        else
            content="$SLUG_OR_CONTENT"
        fi
        
        # Create the file with hugo
        hugo new "$filename"
        
        # Append the content to the file
        echo "$content" >> "$filename"
        ;;
    *)
        # For all other types, use date format with slug
        if [ -z "$SLUG_OR_CONTENT" ]; then
            slug=$(gum input --header="Enter slug for $CONTENT_TYPE:")
        else
            slug="$SLUG_OR_CONTENT"
        fi
        
        filename="content/${CONTENT_TYPE}/${current_date}-${slug}.md"
        
        # Create the file with hugo
        hugo new "$filename"
        ;;
esac

# Update series field if --series flag was provided
if [ -n "$SERIES_VALUE" ]; then
    sed -i '' "s/series: \[\]/series: ['$SERIES_VALUE']/" "$filename"
fi

echo "Created: $filename"
git add "$filename"

# Open in editor if --edit flag was provided
if [ "$EDIT_FLAG" = true ]; then
    idea --line 10000 "$filename"
fi
